using Microsoft.AspNetCore.Mvc;
using Microsoft.SemanticKernel;
using SkTrailCourse.Infra;
using SkTrailCourse.Plugins;
using System.Text;

namespace ZoopSK.Controllers;

public class HomeController : Controller
{
    private readonly Kernel _kernel;
    private readonly AIIntentRouter _router;
    private readonly DisputeOrchestrator _orchestrator;
    private readonly BoletoLookupPlugin _boletoLookup;
    private readonly DisputePlugin _disputes;
    private readonly JsonMemoryStore _store;

    public HomeController(
        Kernel kernel, 
        AIIntentRouter router, 
        DisputeOrchestrator orchestrator,
        BoletoLookupPlugin boletoLookup,
        DisputePlugin disputes,
        JsonMemoryStore store) // ‚Üê ADICIONAR JsonMemoryStore
    {
        _kernel = kernel;
        _router = router;
        _orchestrator = orchestrator;
        _boletoLookup = boletoLookup;
        _disputes = disputes;
        _store = store; // ‚Üê INJETAR O STORE
    }

    // Heur√≠stica simples para decidir se a entrada do usu√°rio √© provavelmente uma reclama√ß√£o
    private bool IsLikelyComplaint(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return false;

        var lowered = input.ToLowerInvariant();

        // Palavras-chave que indicam reclama√ß√£o/fraude/cobran√ßa
        var complaintKeywords = new[]
        {
            "reclam", "cobran", "fraud", "fraude", "n√£o reconhec", "nao reconhec", "estorno", "charg", "cobrado", "cobran√ßa", "cobranca",
            "n√£o paguei", "nao paguei", "cobran√ßa indevida", "cobranca indevida", "erro na cobran√ßa", "contest",
            "n√£o reconhe√ßo", "nao reconheco", "cobran√ßa n√£o", "cobranca nao"
        };

        foreach (var kw in complaintKeywords)
        {
            if (lowered.Contains(kw)) return true;
        }

        // Padr√£o monet√°rio: R$ 123,45 ou apenas n√∫meros seguidos de 'reais' ou 'rs'
        if (System.Text.RegularExpressions.Regex.IsMatch(lowered, @"r\$\s*\d+|\d+\s*reais|\d+,\d{2}\s*reais|rs\s*\d+"))
            return true;

        // Se a entrada for muito curta ou apenas um agradecimento/resposta curta, n√£o √© reclama√ß√£o
        var shortResponses = new[] { "ok", "obrigado", "brigado", "valeu", "thanks", "thanks!", "ok!", "entendi" };
        if (shortResponses.Any(s => lowered.Equals(s))) return false;

        // Caso contr√°rio, conservador: n√£o assume reclama√ß√£o
        return false;
    }

    public IActionResult Index()
    {
        // Mensagem de boas-vindas igual ao terminal
        var welcomeMessage = new StringBuilder();
    welcomeMessage.AppendLine("=== ü§ñ ZoopIA (MVP) ===");
        welcomeMessage.AppendLine("Sistema de an√°lise autom√°tica de cobran√ßas indevidas");
        // welcomeMessage.AppendLine();
        // welcomeMessage.AppendLine("üìù COMO USAR:");
        // welcomeMessage.AppendLine("‚Ä¢ CONSULTAR origem de cobran√ßa:");
        // welcomeMessage.AppendLine("  Ex: 'verifiquei uma compra de 150 reais da zoop no meu boleto'");
        // welcomeMessage.AppendLine("  Ex: 'n√£o reconhe√ßo essa cobran√ßa no meu extrato'");
        // welcomeMessage.AppendLine("‚Ä¢ RECLAMAR de cobran√ßa indevida:");
        // welcomeMessage.AppendLine("  Ex: 'quero reclamar de uma cobran√ßa indevida da Netflix'");
        // welcomeMessage.AppendLine("  Ex: 'fraude na minha fatura'");
        // welcomeMessage.AppendLine();
        // welcomeMessage.AppendLine("üîß COMANDOS DISPON√çVEIS:");
        // welcomeMessage.AppendLine("‚Ä¢ 'listar reclama√ß√µes' - Ver todas as disputas");
        // welcomeMessage.AppendLine("‚Ä¢ 'listar empresas' - Ver empresas cadastradas");
        // welcomeMessage.AppendLine("‚Ä¢ 'mostrar ABC123' - Detalhes de uma disputa");
        // welcomeMessage.AppendLine("‚Ä¢ 'atualizar ABC123 para resolvida' - Atualizar status");
        // welcomeMessage.AppendLine("‚Ä¢ 'excluir ABC123' - Remover uma disputa");
        // welcomeMessage.AppendLine("‚Ä¢ 'sair' - Encerrar o sistema");
        // welcomeMessage.AppendLine();
        welcomeMessage.AppendLine("----------------------------------------");

        ViewBag.WelcomeMessage = welcomeMessage.ToString();
        return View();
    }

    [HttpPost]
    public Task<JsonResult> ProcessConfirmation([FromBody] ConfirmationInput input)
    {
        try
        {
            var response = new ChatResponse();

            if (input == null || string.IsNullOrWhiteSpace(input.UserResponse) || string.IsNullOrWhiteSpace(input.Type))
            {
                response.Message = "‚ùå Confirma√ß√£o inv√°lida.";
                return Task.FromResult(Json(response));
            }

            Console.WriteLine($"üì• Processando confirma√ß√£o: Type={input.Type}, UserResponse={input.UserResponse}");

            // Detectar se o usu√°rio quer CONSULTA ou RECLAMA√á√ÉO com base em texto natural
            var detected = DetectConfirmationIntent(input.UserResponse);

            if (detected == ConfirmationDecision.Consult)
            {
                response.Message = "üë§ Para consulta, preciso do seu CPF:";
                response.RequiresCpfInput = true;
                response.RequiresConfirmation = false;
                response.ConfirmationType = input.Type;
                return Task.FromResult(Json(response));
            }

            if (detected == ConfirmationDecision.Complaint)
            {
                response.Message = "üìù Entendi que voc√™ quer abrir uma reclama√ß√£o. Por favor, descreva o problema com mais detalhes:";
                response.RequiresConfirmation = false;
                response.ConfirmationType = input.Type;
                return Task.FromResult(Json(response));
            }

            // Se n√£o detectou claramente, pede para o usu√°rio responder com texto natural
            response.Message = "ü§î N√£o consegui identificar claramente. Voc√™ prefere CONSULTAR seus boletos da Zoop ou ABRIR UMA RECLAMA√á√ÉO?";
            response.RequiresConfirmation = true;
            response.ConfirmationType = input.Type;
            return Task.FromResult(Json(response));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro em ProcessConfirmation: {ex}");
            var response = new ChatResponse
            {
                Message = $"\n‚ùå Ops! Algo deu errado ao processar a confirma√ß√£o:\n   {ex.Message}\n"
            };
            return Task.FromResult(Json(response));
        }
    }

[HttpPost]
public async Task<JsonResult> ProcessCommand([FromBody] ChatInput input)
{
    try
    {
        var response = new ChatResponse();
        
        if (string.IsNullOrWhiteSpace(input.Command))
        {
            response.Message = "‚ùå Comando vazio.";
            return Json(response);
        }

        var command = input.Command.Trim();
        Console.WriteLine($"üì• Comando recebido: '{command}'");

        // Comando de sa√≠da
        if (command.Equals("sair", StringComparison.OrdinalIgnoreCase) ||
            command.Equals("exit", StringComparison.OrdinalIgnoreCase))
        {
            response.Message = "üëã Encerrando ZoopIA. At√© logo!\n========================================";
            response.IsExit = true;
            return Json(response);
        }

        // Comando direto para listar empresas
        if (command.Equals("listar empresas", StringComparison.OrdinalIgnoreCase))
        {
            var result = await _kernel.InvokeAsync("BoletoLookup", "ListCompanies");
            response.Message = "üè¢ " + result.ToString();
            return Json(response);
        }

        // Comandos simples diretos (sem IA)
        if (command.Equals("listar reclama√ß√µes", StringComparison.OrdinalIgnoreCase) ||
            command.Equals("listar", StringComparison.OrdinalIgnoreCase))
        {
            var listResult = await _kernel.InvokeAsync("Disputes", "ListDisputes");
            response.Message = "üìã " + listResult.ToString();
            return Json(response);
        }

        // Processamento com IA (apenas logs server-side; respostas ao usu√°rio s√£o limpas)
        var routeResult = await _router.RouteAsync(command);
        var plugin = routeResult.plugin;
        var function = routeResult.function;
        var routeArgs = routeResult.args;

        Console.WriteLine($"üéØ Roteamento definido: {plugin}.{function}");

        if (plugin is null || function is null)
        {
            response.Message = "ü§î N√£o entendi. Tente:\n" +
                               "   ‚Ä¢ 'verifiquei uma compra no boleto' (para CONSULTAR origem)\n" +
                               "   ‚Ä¢ 'quero reclamar de uma cobran√ßa' (para RECLAMAR)\n" +
                               "   ‚Ä¢ 'listar reclama√ß√µes'\n" +
                               "   ‚Ä¢ 'listar empresas'";
            return Json(response);
        }

        // Evita cria√ß√£o autom√°tica de disputa quando a entrada n√£o parece ser uma reclama√ß√£o clara
        if (string.Equals(plugin, "Disputes", StringComparison.OrdinalIgnoreCase) &&
            string.Equals(function, "AddDispute", StringComparison.OrdinalIgnoreCase))
        {
            if (!IsLikelyComplaint(command))
            {
                response.Message += "ü§î N√£o consegui identificar claramente uma reclama√ß√£o de cobran√ßa. Pode descrever o problema com mais detalhes (ex: 'quero reclamar de uma cobran√ßa n√£o reconhecida de R$ 150,00')?";
                return Json(response);
            }
        }

        // Caso especial para consulta de boletos (requer intera√ß√£o)
        if (plugin == "BoletoLookup" && function == "SearchByCustomerName")
        {
            // Para consultas de boleto, pedimos CPF em vez do nome
            response.RequiresCpfInput = true;
            response.Message += "üë§ Por favor, informe seu CPF (somente n√∫meros ou formato padr√£o) para consulta:";
            return Json(response);
        }

        // PARA TODOS OS OUTROS CASOS, usar o kernel normalmente
        Console.WriteLine($"‚ö° Invocando: {plugin}.{function}");
        var invokeResult = await _kernel.InvokeAsync(plugin, function, routeArgs);
        
        // Formata√ß√£o da resposta (apenas conte√∫do √∫til ao usu√°rio)
        var resultText = invokeResult?.ToString() ?? "Sem resposta";
        response.Message = resultText;

        // Dica ap√≥s adicionar disputa
        if (function == "AddDispute")
        {
            response.Message += "\n\nüí° Dica: Use 'listar reclama√ß√µes' para ver todas as disputas.";
        }

        Console.WriteLine($"üì§ Resposta enviada para o cliente");
        return Json(response);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Erro no ProcessCommand: {ex}");
        var response = new ChatResponse
        {
            Message = $"\n‚ùå Ops! Algo deu errado:\n   {ex.Message}\n\nüí° Tente reformular sua mensagem.\n"
        };
        return Json(response);
    }
}
    [HttpPost]
    public async Task<JsonResult> SearchBoletos([FromBody] CpfInput input)
    {
        try
        {
            var response = new ChatResponse();
            
            if (string.IsNullOrWhiteSpace(input.CustomerCpf))
            {
                response.Message = "‚ùå CPF n√£o informado.";
                return Json(response);
            }

            response.Message += $"üîç Consultando boletos para o CPF: {input.CustomerCpf}...\n";
            
            var result = await _boletoLookup.SearchByCpf(input.CustomerCpf);
            response.Message += $"\n{result}\n";

            return Json(response);
        }
        catch (Exception ex)
        {
            var response = new ChatResponse
            {
                Message = $"\n‚ùå Erro na consulta: {ex.Message}\n"
            };
            return Json(response);
        }
    }
    
    // Coloca o enum e a fun√ß√£o de detec√ß√£o dentro da classe para visibilidade correta
    private enum ConfirmationDecision
    {
        Unknown = 0,
        Consult = 1,
        Complaint = 2
    }

    // Detecta se a resposta do usu√°rio indica CONSULTA ou RECLAMA√á√ÉO
    private ConfirmationDecision DetectConfirmationIntent(string userText)
    {
        if (string.IsNullOrWhiteSpace(userText)) return ConfirmationDecision.Unknown;

        var lowered = userText.ToLowerInvariant();

        var consultKeywords = new[] { "consult", "consultar", "ver", "verificar", "saber", "boletos", "cobrancas", "detalhes", "ver boletos", "ver cobran√ßas" };
        var complaintKeywords = new[] { "reclam", "reclamar", "problema", "indevida", "indevido", "errada", "abrir", "reclama√ß√£o", "reclamacao", "cobran√ßa indevida", "cobranca indevida" };

        foreach (var kw in consultKeywords)
        {
            if (lowered.Contains(kw)) return ConfirmationDecision.Consult;
        }

        foreach (var kw in complaintKeywords)
        {
            if (lowered.Contains(kw)) return ConfirmationDecision.Complaint;
        }

        // Also check short natural forms
        var consultShort = new[] { "consultar", "quero consultar", "ver", "ver boletos", "ver cobran√ßas", "ver cobrancas", "gostaria de ver" };
        var complaintShort = new[] { "reclamar", "abrir reclama√ß√£o", "abrir reclamacao", "tenho um problema", "cobran√ßa indevida", "cobranca indevida" };

        foreach (var kw in consultShort)
        {
            if (lowered.Contains(kw)) return ConfirmationDecision.Consult;
        }

        foreach (var kw in complaintShort)
        {
            if (lowered.Contains(kw)) return ConfirmationDecision.Complaint;
        }

        return ConfirmationDecision.Unknown;
    }

}

// Model classes
public class ChatInput
{
    public string Command { get; set; } = string.Empty;
}

    public class ConfirmationInput
    {
        public string Type { get; set; } = string.Empty; // ex: "zoop_intent"
        public string UserResponse { get; set; } = string.Empty; // texto natural do usu√°rio
    }

public class NameInput
{
    public string CustomerName { get; set; } = string.Empty;
}

public class CpfInput
{
    public string CustomerCpf { get; set; } = string.Empty;
}

public class ChatResponse
{
    public string Message { get; set; } = string.Empty;
    public bool RequiresNameInput { get; set; }
    public bool RequiresCpfInput { get; set; }
    public bool IsExit { get; set; }
    // Novas propriedades para confirma√ß√£o
    public bool RequiresConfirmation { get; set; }
    public string? ConfirmationType { get; set; }
}
    