@{
    ViewData["Title"] = "ZoopIA";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <!-- Bootstrap 5 CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background: #121212;
            margin: 0;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
        }

        /* Container do terminal */
        .terminal-container {
            background: #1e1e1e;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            border: 1px solid #2b2b2b;
        }

        /* Header com gradiente Zoop */
        .terminal-header {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            padding: 15px 20px;
            border-bottom: none;
            color: #fff;
        }

        .terminal-header h4 {
            font-weight: bold;
            margin: 0;
        }

        /* Corpo do terminal */
        .terminal-body {
            height: 70vh;
            overflow-y: auto;
            padding: 20px;
            background: #1e1e1e;
            color: #f1f1f1;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.6;
        }

        /* Input container */
        .terminal-input-container {
            background: #2b2b2b;
            padding: 15px;
            border-top: 1px solid #444;
        }

        /* Input estilizado */
        .terminal-input {
            background: #1e1e1e !important;
            color: #fff !important;
            border: 1px solid #444 !important;
            font-family: 'Courier New', monospace !important;
            border-radius: 8px !important;
        }

        .terminal-input:focus {
            border-color: #FF5C00 !important;
            box-shadow: 0 0 0 0.2rem rgba(255, 92, 0, 0.25) !important;
        }

        /* Bot√£o estilo Zoop */
        .btn-terminal {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            color: #fff;
            border: none;
            font-weight: bold;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-terminal:hover {
            filter: brightness(1.1);
            transform: scale(1.05);
        }

        /* Scrollbar */
        .terminal-body::-webkit-scrollbar {
            width: 10px;
        }
        .terminal-body::-webkit-scrollbar-track {
            background: #1a1a1a;
        }
        .terminal-body::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            border-radius: 5px;
        }

        /* Mensagens */
        .user-message {
            color: #FF5C00;
            font-weight: bold;
        }
        .system-message {
            color: #00e676;
        }
        .error-message {
            color: #ff4444;
        }
        .warning-message {
            color: #ffaa00;
        }

        /* Anima√ß√£o do cursor */
        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        .typing-indicator::after {
            content: '‚ñä';
            animation: blink 1s infinite;
            color: #FF5C00;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 col-xl-8">
                <div class="terminal-container">
                    <!-- Header -->
                    <div class="terminal-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1">ü§ñ ZoopIA</h4>
                                <small>Sistema de an√°lise autom√°tica de cobran√ßas indevidas</small>
                            </div>
                            <div>
                                <span class="badge bg-dark text-white me-2">Online</span>
                                <button class="btn btn-sm btn-light" onclick="clearTerminal()">üßπ Limpar</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Terminal Output -->
                    <div class="terminal-body" id="terminalOutput">
                        <pre class="terminal-text" id="outputText">@Html.Raw(ViewBag.WelcomeMessage?.Replace("\n", "<br>"))</pre>
                    </div>
                    
                    <!-- Input Area -->
                    <div class="terminal-input-container">
                        <!-- Normal Input -->
                        <div id="normalInput">
                            <div class="input-group">
                                <span class="input-group-text bg-dark text-white border-dark">üí¨</span>
                                <input type="text" class="form-control terminal-input" id="commandInput" 
                                       placeholder="Digite seu comando (ex: 'listar empresas', 'verifiquei uma compra no boleto')..." 
                                       autocomplete="off" autofocus>
                                <button class="btn btn-terminal" id="sendButton" onclick="sendCommand()">
                                    <span id="sendText">Enviar</span>
                                    <span id="loadingSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                </button>
                            </div>
                        </div>
                        
                        <!-- Name Input (hidden by default) -->
                        <div id="nameInput" class="mt-3" style="display: none;">
                            <div class="input-group">
                                <span class="input-group-text bg-dark text-white border-dark">üë§</span>
                                <input type="text" class="form-control terminal-input" id="customerNameInput" 
                                       placeholder="Digite seu nome completo..." autocomplete="off">
                                <button class="btn btn-terminal" onclick="searchBoletos()">
                                    <span>Consultar Boletos</span>
                                </button>
                                <button class="btn btn-secondary" onclick="cancelNameInput()">Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Elementos DOM
        const outputText = document.getElementById('outputText');
        const commandInput = document.getElementById('commandInput');
        const terminalOutput = document.getElementById('terminalOutput');
        const normalInput = document.getElementById('normalInput');
        const nameInput = document.getElementById('nameInput');
        const customerNameInput = document.getElementById('customerNameInput');
        const sendButton = document.getElementById('sendButton');
        const sendText = document.getElementById('sendText');
        const loadingSpinner = document.getElementById('loadingSpinner');

        // Foco no input principal
        commandInput.focus();

        // Enviar comando com Enter
        commandInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendCommand();
            }
        });

        // Enviar nome com Enter
        customerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchBoletos();
            }
        });

        async function sendCommand() {
            const command = commandInput.value.trim();
            if (!command) return;

            // Mostra loading
            sendText.classList.add('d-none');
            loadingSpinner.classList.remove('d-none');
            sendButton.disabled = true;

            // Adiciona comando do usu√°rio ao terminal
            addToTerminal(`<span class="user-message">üí¨ > ${command}</span>`, true);

            // Limpa input
            commandInput.value = '';

            try {
                const response = await fetch('/Home/ProcessCommand', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ command: command })
                });

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const result = await response.json();

                if (result.isExit) {
                    addToTerminal(`<span class="system-message">${result.message}</span>`, true);
                    commandInput.disabled = true;
                    return;
                }

                if (result.requiresNameInput) {
                    normalInput.style.display = 'none';
                    nameInput.style.display = 'block';
                    customerNameInput.focus();
                }

                const formattedMessage = result.message.replace(/\n/g, '<br>');
                addToTerminal(formattedMessage, true);

            } catch (error) {
                addToTerminal(`<span class="error-message">‚ùå Erro de conex√£o: ${error.message}. Tente novamente.</span>`, true);
            } finally {
                sendText.classList.remove('d-none');
                loadingSpinner.classList.add('d-none');
                sendButton.disabled = false;
            }
        }

        async function searchBoletos() {
            const customerName = customerNameInput.value.trim();
            if (!customerName) {
                addToTerminal('<span class="error-message">‚ùå Por favor, digite um nome v√°lido.</span>', true);
                return;
            }

            addToTerminal(`<span class="system-message">üë§ Nome informado: ${customerName}</span>`, true);

            sendText.classList.add('d-none');
            loadingSpinner.classList.remove('d-none');

            nameInput.style.display = 'none';
            normalInput.style.display = 'block';
            customerNameInput.value = '';

            try {
                const response = await fetch('/Home/SearchBoletos', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customerName: customerName })
                });

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const result = await response.json();
                const formattedMessage = result.message.replace(/\n/g, '<br>');
                addToTerminal(formattedMessage, true);

            } catch (error) {
                addToTerminal(`<span class="error-message">‚ùå Erro na consulta: ${error.message}</span>`, true);
            } finally {
                sendText.classList.remove('d-none');
                loadingSpinner.classList.add('d-none');
                commandInput.focus();
            }
        }

        function cancelNameInput() {
            nameInput.style.display = 'none';
            normalInput.style.display = 'block';
            customerNameInput.value = '';
            commandInput.focus();
            addToTerminal('<span class="warning-message">‚ùå Consulta de boletos cancelada.</span>', true);
        }

        function addToTerminal(html, scroll = false) {
            outputText.innerHTML += html + '<br>';
            if (scroll) terminalOutput.scrollTop = terminalOutput.scrollHeight;
        }

        function clearTerminal() {
            outputText.innerHTML = '';
            addToTerminal('<span class="system-message">üßπ Terminal limpo.<br>----------------------------------------</span>', true);
        }

        addToTerminal('<span class="system-message">‚úÖ Interface carregada. Digite um comando para come√ßar.</span>', true);
    </script>
</body>
</html>
