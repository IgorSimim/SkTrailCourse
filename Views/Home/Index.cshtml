@{
    ViewData["Title"] = "ZoopIA";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <!-- Bootstrap 5 CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background: #121212;
            margin: 0;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
        }

        /* Container do terminal */
        .terminal-container {
            background: #1e1e1e;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            border: 1px solid #2b2b2b;
        }

        /* Header com gradiente Zoop */
        .terminal-header {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            padding: 15px 20px;
            border-bottom: none;
            color: #fff;
        }

        .terminal-header h4 {
            font-weight: bold;
            margin: 0;
        }

        /* Corpo do terminal - CORRE√á√ÉO CR√çTICA */
    .terminal-body {
        height: 70vh;
        overflow-y: auto;
        padding: 5px 20px !important; /* Reduzido drasticamente no topo/baixo */
        background: #1e1e1e;
        color: #f1f1f1;
        font-family: 'Courier New', monospace;
        font-size: 14px;
        line-height: 1.3;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

        /* Input container */
        .terminal-input-container {
            background: #2b2b2b;
            padding: 15px;
            border-top: 1px solid #444;
        }

        /* Input estilizado */
        .terminal-input {
            background: #1e1e1e !important;
            color: #fff !important;
            border: 1px solid #444 !important;
            font-family: 'Courier New', monospace !important;
            border-radius: 8px !important;
        }

        .terminal-input:focus {
            border-color: #FF5C00 !important;
            box-shadow: 0 0 0 0.2rem rgba(255, 92, 0, 0.25) !important;
        }

        /* Bot√£o estilo Zoop */
        .btn-terminal {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            color: #fff;
            border: none;
            font-weight: bold;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-terminal:hover {
            filter: brightness(1.1);
            transform: scale(1.05);
        }

        /* Scrollbar */
        .terminal-body::-webkit-scrollbar {
            width: 10px;
        }
        .terminal-body::-webkit-scrollbar-track {
            background: #1a1a1a;
        }
        .terminal-body::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            border-radius: 5px;
        }

        /* PALETA DE CORES ZOOP - ESPA√áAMENTO REDUZIDO */
        
        /* Mensagem do usu√°rio - Laranja Zoop */
        .user-message {
            color: #FF5C00;
            font-weight: bold;
            display: block;
            margin-bottom: 8px; /* Reduzido de 15px para 8px */
            padding: 4px 0; /* Reduzido de 8px para 4px */
        }

        /* Mensagem do sistema - Branco/neutro */
        .system-message {
            color: #ffffff;
            display: block;
            margin-bottom: 8px; /* Reduzido de 15px para 8px */
            padding: 4px 0; /* Reduzido de 8px para 4px */
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        /* Mensagens de sucesso - Verde claro */
        .success-message {
            color: #00e676;
            display: block;
            margin-bottom: 8px; /* Reduzido de 15px para 8px */
            padding: 4px 0; /* Reduzido de 8px para 4px */
            font-weight: 500;
        }

        /* Mensagens de erro - Rosa/Zoop */
        .error-message {
            color: #FF2D92;
            display: block;
            margin-bottom: 8px; /* Reduzido de 15px para 8px */
            padding: 4px 0; /* Reduzido de 8px para 4px */
            font-weight: 500;
        }

        /* Mensagens de aviso - Amarelo/Laranja */
        .warning-message {
            color: #FFA000;
            display: block;
            margin-bottom: 8px; /* Reduzido de 15px para 8px */
            padding: 4px 0; /* Reduzido de 8px para 4px */
            font-weight: 500;
        }

        /* Mensagens de informa√ß√£o - Azul claro */
        .info-message {
            color: #29B6F6;
            display: block;
            margin-bottom: 8px; /* Reduzido de 15px para 8px */
            padding: 4px 0; /* Reduzido de 8px para 4px */
            font-weight: 500;
        }

        /* Texto do terminal */
        .terminal-text {
            white-space: pre-wrap !important;
            word-wrap: break-word !important;
            font-family: 'Courier New', monospace !important;
            font-size: 14px !important;
            line-height: 1.4 !important;
            margin: 0 !important;
            padding: 0 !important;
        }

        /* Destaques espec√≠ficos */
        .highlight-orange {
            color: #FF5C00;
            font-weight: bold;
        }

        .highlight-pink {
            color: #FF2D92;
            font-weight: bold;
        }

        .highlight-gradient {
            background: linear-gradient(135deg, #FF5C00, #FF2D92);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: bold;
        }

        /* Container de mensagem compacto */
        .message-container {
            margin-bottom: 8px;
            display: block;
        }

        /* Linha individual dentro das mensagens - MAIS COMPACTO */
        .message-line {
            line-height: 1.3; /* Mais compacto que o padr√£o */
            margin: 2px 0; /* Reduz espa√ßamento entre linhas */
        }

        /* Anima√ß√£o do cursor */
        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        .typing-indicator::after {
            content: '‚ñä';
            animation: blink 1s infinite;
            color: #FF5C00;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 col-xl-8">
                <div class="terminal-container">
                    <!-- Header -->
                    <div class="terminal-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="mb-1">ü§ñ ZoopIA</h4>
                                <small>Sistema de an√°lise autom√°tica de cobran√ßas indevidas</small>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-light me-2" onclick="clearTerminal()">üßπ Limpar</button>
                                <button class="btn btn-sm btn-outline-light" data-bs-toggle="modal" data-bs-target="#helpModal">‚ùî Ajuda</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Terminal Output -->
                    <div class="terminal-body" id="terminalOutput">
                        <div class="terminal-text" id="outputText">
                          
                                </span>
                            </div>
                            <div class="message-container">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Input Area -->
                    <div class="terminal-input-container">
                        <!-- Normal Input -->
                        <div id="normalInput">
                            <div class="input-group">
                                <span class="input-group-text bg-dark text-white border-dark">üí¨</span>
                                <input type="text" class="form-control terminal-input" id="commandInput" 
                                       placeholder="Digite seu comando (ex: 'listar empresas', 'verifiquei uma compra no boleto')..." 
                                       autocomplete="off" autofocus>
                                <button class="btn btn-terminal" id="sendButton" onclick="sendCommand()">
                                    <span id="sendText">Enviar</span>
                                    <span id="loadingSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                </button>
                            </div>
                        </div>
                        
                        <!-- CPF Input (hidden by default) -->
                        <div id="cpfInput" class="mt-3" style="display: none;">
                            <div class="input-group">
                                <span class="input-group-text bg-dark text-white border-dark">üë§</span>
                                <input type="text" class="form-control terminal-input" id="customerCpfInput" 
                                       placeholder="Digite seu CPF (apenas n√∫meros)" autocomplete="off">
                                <button class="btn btn-terminal" onclick="searchBoletos()">
                                    <span>Consultar Boletos</span>
                                </button>
                                <button class="btn btn-secondary" onclick="cancelCpfInput()">Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Help Modal -->
    <div class="modal fade" id="helpModal" tabindex="-1" aria-labelledby="helpModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header">
                    <h5 class="modal-title" id="helpModalLabel">Ajuda - Comandos</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-unstyled">
                        <li class="mb-2"><span class="highlight-orange">verifiquei uma compra no boleto</span> ‚Äî consulta origem do pagamento (vai pedir CPF)</li>
                        <li class="mb-2"><span class="highlight-pink">quero reclamar de uma cobran√ßa de R$ 150,00</span> ‚Äî abre nova reclama√ß√£o</li>
                        <li class="mb-2"><span class="info-message">listar reclama√ß√µes</span> ‚Äî lista as disputas registradas</li>
                        <li class="mb-2"><span class="info-message">listar empresas</span> ‚Äî mostra empresas cadastradas</li>
                        <li class="mb-2"><span class="info-message">mostrar ABC123</span> ‚Äî detalhes de uma disputa espec√≠fica</li>
                        <li class="mb-2"><span class="success-message">atualizar ABC123 para resolvida</span> ‚Äî atualiza status de uma disputa</li>
                        <li class="mb-2"><span class="error-message">excluir ABC123</span> ‚Äî remove uma disputa</li>
                    </ul>
                    <p class="small text-muted mt-3">Dica: descreva o problema com detalhes (valor, data, estabelecimento) para facilitar a an√°lise autom√°tica.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Elementos DOM
        const outputText = document.getElementById('outputText');
        const commandInput = document.getElementById('commandInput');
        const terminalOutput = document.getElementById('terminalOutput');
        const normalInput = document.getElementById('normalInput');
        const cpfInput = document.getElementById('cpfInput');
        const customerCpfInput = document.getElementById('customerCpfInput');
        const sendButton = document.getElementById('sendButton');
        const sendText = document.getElementById('sendText');
        const loadingSpinner = document.getElementById('loadingSpinner');

        // Foco no input principal
        commandInput.focus();

        // Enviar comando com Enter
        commandInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendCommand();
            }
        });

        // Enviar CPF com Enter
        customerCpfInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchBoletos();
            }
        });

        async function sendCommand() {
            const command = commandInput.value.trim();
            if (!command) return;

            // Mostra loading
            sendText.classList.add('d-none');
            loadingSpinner.classList.remove('d-none');
            sendButton.disabled = true;

            // Adiciona comando do usu√°rio ao terminal
            addToTerminal(`<div class="message-container"><span class="user-message">üí¨ > ${command}</span></div>`, true);

            // Limpa input
            commandInput.value = '';

            try {
                const response = await fetch('/Home/ProcessCommand', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ command: command })
                });

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const result = await response.json();

                if (result.isExit) {
                    addToTerminal(`<div class="message-container"><span class="system-message">${result.message}</span></div>`, true);
                    commandInput.disabled = true;
                    return;
                }

                if (result.requiresCpfInput) {
                    normalInput.style.display = 'none';
                    cpfInput.style.display = 'block';
                    customerCpfInput.focus();
                }

                // Aplica cores baseadas no conte√∫do da mensagem
                const formattedMessage = applyMessageColors(result.message);
                addToTerminal(formattedMessage, true);

            } catch (error) {
                addToTerminal(`<div class="message-container"><span class="error-message">‚ùå Erro de conex√£o: ${error.message}. Tente novamente.</span></div>`, true);
            } finally {
                sendText.classList.remove('d-none');
                loadingSpinner.classList.add('d-none');
                sendButton.disabled = false;
            }
        }

        // Fun√ß√£o para aplicar cores automaticamente baseadas no conte√∫do
        function applyMessageColors(message) {
            const formattedMessage = message.replace(/\n/g, '<br>');
            
            // Determina a classe de cor baseada no conte√∫do
            let messageClass = 'system-message'; // padr√£o
            
            if (message.includes('‚ùå') || message.includes('Erro') || message.includes('n√£o pode')) {
                messageClass = 'error-message';
            } else if (message.includes('‚úÖ') || message.includes('sucesso') || message.includes('Sucesso')) {
                messageClass = 'success-message';
            } else if (message.includes('‚ö†Ô∏è') || message.includes('Aten√ß√£o') || message.includes('aten√ß√£o')) {
                messageClass = 'warning-message';
            } else if (message.includes('üîç') || message.includes('Consultando') || message.includes('analisando')) {
                messageClass = 'info-message';
            } else if (message.includes('üí°') || message.includes('Dica')) {
                messageClass = 'info-message';
            }
            
            return `<div class="message-container"><span class="${messageClass}">${formattedMessage}</span></div>`;
        }

        async function searchBoletos() {
            const customerCpf = customerCpfInput.value.trim();
            if (!customerCpf) {
                addToTerminal('<div class="message-container"><span class="error-message">‚ùå Por favor, digite um CPF v√°lido.</span></div>', true);
                return;
            }

            addToTerminal(`<div class="message-container"><span class="info-message">üë§ CPF informado: ${customerCpf}</span></div>`, true);

            sendText.classList.add('d-none');
            loadingSpinner.classList.remove('d-none');

            cpfInput.style.display = 'none';
            normalInput.style.display = 'block';
            customerCpfInput.value = '';

            try {
                const response = await fetch('/Home/SearchBoletos', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ customerCpf: customerCpf })
                });

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const result = await response.json();
                const formattedMessage = applyMessageColors(result.message);
                addToTerminal(formattedMessage, true);

            } catch (error) {
                addToTerminal(`<div class="message-container"><span class="error-message">‚ùå Erro na consulta: ${error.message}</span></div>`, true);
            } finally {
                sendText.classList.remove('d-none');
                loadingSpinner.classList.add('d-none');
                commandInput.focus();
            }
        }

        function cancelCpfInput() {
            cpfInput.style.display = 'none';
            normalInput.style.display = 'block';
            customerCpfInput.value = '';
            commandInput.focus();
            addToTerminal('<div class="message-container"><span class="warning-message">‚ùå Consulta de boletos cancelada.</span></div>', true);
        }

        function addToTerminal(html, scroll = false) {
            const div = document.createElement('div');
            div.innerHTML = html;
            outputText.appendChild(div);
            
            if (scroll) {
                terminalOutput.scrollTop = terminalOutput.scrollHeight;
            }
        }

        function clearTerminal() {
            outputText.innerHTML = '';
            addToTerminal('<div class="message-container"><span class="system-message">üßπ Terminal limpo.<br>----------------------------------------</span></div>', true);
        }
    </script>
</body>
</html>