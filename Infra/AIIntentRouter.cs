using Microsoft.SemanticKernel;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace SkTrailCourse.Infra;

public class AIIntentRouter
{
    private readonly Kernel _kernel;

    public AIIntentRouter(Kernel kernel)
    {
        _kernel = kernel ?? throw new ArgumentNullException(nameof(kernel));
    }

    public async Task<(string? plugin, string? function, KernelArguments args)> RouteAsync(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return (null, null, new KernelArguments());

        var args = new KernelArguments();

        try
        {
            var prompt = @$"
ANALISE a inten√ß√£o real do usu√°rio e determine a fun√ß√£o correta:

ENTRADA DO USU√ÅRIO: ""{input}""

FUN√á√ïES DISPON√çVEIS:

1. Disputes.AddDispute - PARA: Nova reclama√ß√£o, fraude, cobran√ßa indevida, problema n√£o relatado antes
2. Disputes.EditDispute - PARA: Corrigir, atualizar, modificar uma reclama√ß√£o J√Å EXISTENTE (quando menciona ID ou se refere a uma reclama√ß√£o anterior)
3. Disputes.ListDisputes - PARA: Listar, ver, mostrar todas as reclama√ß√µes
4. Disputes.DeleteDispute - PARA: Excluir, remover, apagar uma reclama√ß√£o espec√≠fica
5. Disputes.ShowDispute - PARA: Detalhes, informa√ß√µes espec√≠ficas de uma reclama√ß√£o
6. BoletoLookup.SearchByCustomerName - PARA: Consultar, verificar, identificar origem de boletos/cobran√ßas

AN√ÅLISE DE INTEN√á√ÉO - PERGUNTAS CR√çTICAS:

- O usu√°rio est√° se referindo a uma reclama√ß√£o EXISTENTE (menciona ID como 9b344c60 ou fala ""aquela reclama√ß√£o"")? ‚Üí EditDispute/ShowDispute/DeleteDispute
- O usu√°rio quer CRIAR uma NOVA reclama√ß√£o? ‚Üí AddDispute  
- O usu√°rio quer apenas CONSULTAR/VER informa√ß√µes? ‚Üí ListDisputes ou SearchByCustomerName
- O usu√°rio menciona ""boleto"", ""cobran√ßa"", ""verifiquei"" sem reclamar? ‚Üí SearchByCustomerName

EXEMPLOS DE INTEN√á√ÉO:

- ""quero reclamar de uma cobran√ßa da Netflix"" ‚Üí NOVA reclama√ß√£o ‚Üí AddDispute
- ""na vdd a reclama√ß√£o 9b344c60 √© de 500 reais"" ‚Üí CORRE√á√ÉO de existente ‚Üí EditDispute (id: ""9b344c60"", correctionText: ""√© de 500 reais"")
- ""aquela reclama√ß√£o que fiz, o valor √© 300"" ‚Üí CORRE√á√ÉO de existente ‚Üí EditDispute  
- ""lista minhas reclama√ß√µes"" ‚Üí LISTAR ‚Üí ListDisputes
- ""verifiquei uma compra no boleto"" ‚Üí CONSULTAR ‚Üí SearchByCustomerName
- ""excluir a 9b344c60"" ‚Üí EXCLUIR ‚Üí DeleteDispute (id: ""9b344c60"")
- ""detalhes da abc123"" ‚Üí DETALHES ‚Üí ShowDispute (id: ""abc123"")

EXTRA√á√ÉO DE PAR√ÇMETROS:
- Para EditDispute: extraia 'id' (padr√£o: 8 caracteres alfanum√©ricos) e 'correctionText' (o texto da corre√ß√£o)
- Para DeleteDispute/ShowDispute: extraia apenas 'id'
- Para AddDispute: use o texto completo como 'complaint'

RESPONDA SOMENTE COM JSON:

{{
  ""plugin"": ""Disputes"",
  ""function"": ""AddDispute"",
  ""parameters"": {{ 
    ""id"": ""valor_ou_null"", 
    ""complaint"": ""valor_ou_null"",
    ""correctionText"": ""valor_ou_null""
  }}
}}

OU

{{
  ""plugin"": ""BoletoLookup"", 
  ""function"": ""SearchByCustomerName"",
  ""parameters"": {{}}
}}";

            var result = await _kernel.InvokePromptAsync(prompt);
            var response = result.ToString().Trim();

            Console.WriteLine($"ü§ñ Resposta da IA: {response}");

            // Limpa markdown se houver
            response = response
                .Replace("```json", "", StringComparison.OrdinalIgnoreCase)
                .Replace("```", "")
                .Trim();

            // Extrai JSON
            var jsonStart = response.IndexOf('{');
            var jsonEnd = response.LastIndexOf('}');

            if (jsonStart >= 0 && jsonEnd > jsonStart)
            {
                var jsonRaw = response.Substring(jsonStart, jsonEnd - jsonStart + 1);

                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    AllowTrailingCommas = true,
                    ReadCommentHandling = JsonCommentHandling.Skip
                };

                try
                {
                    var routeInfo = JsonSerializer.Deserialize<RouteInfo>(jsonRaw, options);

                    if (routeInfo != null && !string.IsNullOrEmpty(routeInfo.Plugin) && !string.IsNullOrEmpty(routeInfo.Function))
                    {
                        var cleanPlugin = routeInfo.Plugin.Replace("Plugin ", "").Replace("plugin ", "").Trim();

                        // Processa par√¢metros de forma inteligente
                        if (routeInfo.Parameters != null)
                        {
                            foreach (var param in routeInfo.Parameters)
                            {
                                var paramValue = param.Value?.ToString();
                                if (!string.IsNullOrEmpty(paramValue) && !paramValue.Equals("null", StringComparison.OrdinalIgnoreCase))
                                {
                                    args[param.Key] = paramValue;
                                    Console.WriteLine($"üîß Par√¢metro extra√≠do: {param.Key} = {paramValue}");
                                }
                            }
                        }

                        // GARANTE par√¢metros obrigat√≥rios baseados na fun√ß√£o
                        if (routeInfo.Function.Equals("AddDispute", StringComparison.OrdinalIgnoreCase) && !args.ContainsKey("complaint"))
                        {
                            args["complaint"] = input;
                        }

                        if (routeInfo.Function.Equals("EditDispute", StringComparison.OrdinalIgnoreCase))
                        {
                            if (!args.ContainsKey("id"))
                            {
                                // Tenta extrair ID como fallback
                                var extractedId = ExtractIdFromInput(input);
                                if (extractedId != null)
                                {
                                    args["id"] = extractedId;
                                    args["correctionText"] = input;
                                    Console.WriteLine($"üîß ID extra√≠do como fallback: {extractedId}");
                                }
                            }
                            if (!args.ContainsKey("correctionText"))
                            {
                                args["correctionText"] = input;
                            }
                        }

                        if ((routeInfo.Function.Equals("DeleteDispute", StringComparison.OrdinalIgnoreCase) || 
                             routeInfo.Function.Equals("ShowDispute", StringComparison.OrdinalIgnoreCase)) &&
                            !args.ContainsKey("id"))
                        {
                            var extractedId = ExtractIdFromInput(input);
                            if (extractedId != null)
                            {
                                args["id"] = extractedId;
                            }
                        }

                        Console.WriteLine($"üéØ Roteamento final: {cleanPlugin}.{routeInfo.Function}");
                        return (cleanPlugin, routeInfo.Function, args);
                    }
                }
                catch (JsonException jex)
                {
                    Console.WriteLine($"‚ùå Erro ao analisar JSON: {jex.Message}");
                    Console.WriteLine($"üìÑ JSON problem√°tico: {jsonRaw}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro no roteador: {ex.Message}");
        }

        // FALLBACK M√çNIMO: Se tudo falhar, pergunta se √© consulta ou reclama√ß√£o
        Console.WriteLine($"üîÑ Fallback m√≠nimo - assumindo consulta de boleto");
        return ("BoletoLookup", "SearchByCustomerName", args);
    }

    private string? ExtractIdFromInput(string input)
    {
        try
        {
            var idPattern = @"\b[a-f0-9]{8}\b|\b[A-Za-z0-9]{6,8}\b";
            var match = Regex.Match(input, idPattern);
            return match.Success ? match.Value : null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao extrair ID: {ex.Message}");
            return null;
        }
    }

    private class RouteInfo
    {
        public string? Plugin { get; set; }
        public string? Function { get; set; }
        public Dictionary<string, object?>? Parameters { get; set; }
    }
}